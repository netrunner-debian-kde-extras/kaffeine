diff -Nrua kaffeine.orig/kaffeine.cpp kaffeine/kaffeine.cpp
--- kaffeine.orig/kaffeine.cpp	2005-03-31 16:12:50.000000000 -0500
+++ kaffeine/kaffeine.cpp	2005-03-31 17:16:53.646706752 -0500
@@ -210,6 +210,10 @@
   KAccel* accel = new KAccel(this);
   accel->insert("Escape Fullscreen", Key_Escape, this, SLOT(slotEscapeFullscreen()));
 
+  // If there are URLs, don't resume
+  if ( urls.count() ) 
+    m_resumePlayback = false;
+  
   loadConfig();
   slotChangeStatusbar(i18n("Kaffeine Player") + " " + VERSION);
 
@@ -557,6 +561,18 @@
   m_playlist->setRandom(m_shuffle->isChecked());
 }
 
+void Kaffeine::slotTogglePause()
+{
+    pause();
+}
+
+void Kaffeine::slotSetPosition()
+{
+    if ( m_mediaPart )
+       m_mediaPart->slotSetPosition(uint(m_savedPosition));
+    return;
+}
+
 void Kaffeine::slotMetaFromPlayer()
 {
   m_playlist->mergeMeta(m_mediaPart->mrl());
@@ -640,6 +656,7 @@
 #endif
 
     m_playersMenu = new KActionMenu(i18n("&Player Engine"), actionCollection(), "options_player");
+    m_toggleResumePlayback =  new KToggleAction(i18n("Resume Playback on Start"), 0, 0, this, SLOT(slotToggleResumePlayback()), actionCollection(), "options_resume_playback");
     KStdAction::keyBindings(this, SLOT(optionsConfigureKeys()), actionCollection());
     KStdAction::configureToolbars(this, SLOT(optionsConfigureToolbars()), actionCollection());
     KStdAction::preferences(this, SLOT(slotPreferences()), actionCollection(), "options_preferences");
@@ -746,6 +763,49 @@
   m_playlist->loadConfig(config);
 
   applyMainWindowSettings(config, "Main Window");
+
+  // Resume playback on startup
+  config->setGroup("Playlist");
+  QString url = config->readEntry("Current Entry", "");
+  config->setGroup("Player Part");
+  m_resumePlayback = config->readBoolEntry("Resume Playback", false);
+  m_toggleResumePlayback->setChecked(m_resumePlayback);
+  bool m_playingAtExit = config->readBoolEntry("Playing at Exit", false);
+  bool m_pausedAtExit = config->readBoolEntry("Paused at Exit", false);
+  m_savedPosition =  config->readNumEntry("Position at Exit", 0);
+  // If url is a local file, check that it exists before playing.
+  QFileInfo file = QFileInfo("/");
+  if ( url.startsWith("/", false) )
+    file = QFileInfo(url);
+  kdDebug() << "Kaffeine: Loading " << url << " at " << m_savedPosition 
+    << ". Resume Playback: " << m_resumePlayback
+    << ". Exists: " << file.exists()
+    << ". Playing: " << m_playingAtExit
+    << ". Paused: " << m_pausedAtExit
+    << ".\n";
+  int t=1;
+  if ( m_playingAtExit && url && file.exists() && m_resumePlayback ) {
+    if ( m_savedPosition ) {
+//    // I have to mute here since I can't load a track without playing it.
+//    // FIXME: If we're already muted, it sucks. Hope nobody does this...
+//    kdDebug() << "Kaffeine: Muting\n";
+//    slotMute();
+      slotPlayRecent( KURL(url) );
+      // For some reason, timers were needed for this to work properly.
+      QTimer::singleShot(t, this, SLOT(slotSwitchToPlayerWindow()));
+      QTimer::singleShot(t, this, SLOT(slotTogglePause()));
+      if ( ! m_pausedAtExit ) {
+        play();
+      }
+      QTimer::singleShot(t, this, SLOT(slotSetPosition()));
+//    // Unmute.
+//    kdDebug() << "Kaffeine: Unmuting\n";
+//    QTimer::singleShot(t, this, SLOT(slotMute()));
+    } else {
+      slotPlayRecent( KURL(url) );
+      QTimer::singleShot(t, this, SLOT(slotSwitchToPlayerWindow()));
+    }
+  }
 }
 
 void Kaffeine::saveConfig()
@@ -777,6 +837,20 @@
   config->setGroup("Player Part");
   config->writeEntry("Last Service Desktop Name", m_currentPartService);
 
+  // Remember player position on exit
+  // TODO: Should use absolute time, integer percentage too coarse
+  if ( isPlaying() ) {
+    m_savedPosition = m_mediaPart->position();
+  } else {
+    m_savedPosition = 0;
+  }
+  config->writeEntry("Position at Exit", m_savedPosition);
+  m_playingAtExit = isPlaying() && m_savedPosition < 100;
+  config->writeEntry("Playing at Exit", m_playingAtExit);
+  config->writeEntry("Paused at Exit", m_mediaPart->isPaused());
+  config->writeEntry("Resume Playback", m_resumePlayback);
+  kdDebug() << "Saving " << m_mediaPart->mrl().url() << " at " << m_mediaPart->position() << ". Playing: " << m_playingAtExit << endl;
+
   m_recent->saveEntries(config, "Recent Files");
 
   m_playlist->saveConfig(config);
@@ -1194,6 +1268,11 @@
   }
 }
 
+void Kaffeine::slotToggleResumePlayback()
+{
+  m_resumePlayback = m_toggleResumePlayback->isChecked();
+}
+
 void Kaffeine::hideToolbars(bool hide)
 {
   if (hide)
@@ -1902,4 +1981,6 @@
 }
 
 
-
+/*
+ * vim: expandtab shiftwidth=2:
+ */
diff -Nrua kaffeine.orig/kaffeine.h kaffeine/kaffeine.h
--- kaffeine.orig/kaffeine.h	2005-03-31 16:12:50.000000000 -0500
+++ kaffeine/kaffeine.h	2005-03-31 17:12:21.665054248 -0500
@@ -112,7 +112,9 @@
 public slots:
     void slotPlay(const MRL&);
     void slotLoadURLS(const QStringList&);
+    void slotSetPosition();
     void slotSwitchToPlayerWindow();
+    void slotTogglePause();
 
 protected:
     void showEvent(QShowEvent*);
@@ -157,6 +159,7 @@
     void slotToggleFullscreen();
     void slotEscapeFullscreen();
     void slotToggleMinimalMode();
+    void slotToggleResumePlayback();
     void slotToggleTab();
     void slotPreferences();
     void slotOriginalAspect();
@@ -228,6 +231,7 @@
     
     KRecentFilesAction* m_recent;
     KToggleFullScreenAction* m_fullscreen;
+    KToggleAction* m_toggleResumePlayback;
     KToggleAction* m_minimal;
     KToggleAction* m_shuffle;
     KToggleAction* m_repeat;
@@ -244,6 +248,10 @@
     QTimer m_screensaverTimer;
     int m_screensaverTimeout;
     int m_haveXTest, m_xTestKeycode;
+    bool m_resumePlayback;
+    bool m_playingAtExit;
+    bool m_pausedAtExit;
+    unsigned int m_savedPosition;
 };
 
 #include <ktabwidget.h>
@@ -280,3 +288,7 @@
 };  
 
 #endif // _KAFFEINE_H_
+
+/*
+ * vim: expandtab shiftwidth=2:
+ */
diff -Nrua kaffeine.orig/kaffeineui.rc kaffeine/kaffeineui.rc
--- kaffeine.orig/kaffeineui.rc	2005-03-31 16:12:50.000000000 -0500
+++ kaffeine/kaffeineui.rc	2005-03-31 17:16:30.299256104 -0500
@@ -65,6 +65,8 @@
     <Merge name="StandardToolBarMenuHandler"/>
     <Action name="options_show_statusbar"/>
     <Separator/>
+    <Action name="options_resume_playback"/>
+    <Separator/>
     <Action name="options_configure_keybinding"/>
     <Action name="options_configure_toolbars"/>
     <Separator/>
